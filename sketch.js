/* this work is inspired by a contemporary Japanese manifesto,
but some fun variations are intentionally inserted */


/* Global variable: defined outside the blocks
  of code and usable in all functions. */
  
  /* Useful variables to create spirals.
    They will be used in draw (), but they are
    incremented from time to time */
    let angle  = 0;
    let scalar = 2;
    const speed = 0.2;


/* The setup() function is called once when the program starts.
  It's used to define initial environment properties */

function setup() {

// define workspace features (screen size, background color, mode)
  createCanvas(470, 600);
  background('black');
  rectMode(CENTER);
  angleMode(RADIANS);

// red big circle (color, stroke, size)
  fill('red');
  noStroke();
  circle(190, 350, 250);

// smaller circle (color, stroke, size)
  noFill();
  stroke('papayaWhip');
  strokeWeight(3);
  circle (300, 450, 180);

// fixed text (color, stroke, size, style, font, text)
  fill('papayaWhip');
  noStroke();
  textSize(20);
  textStyle('bold');
  textFont('montserrat'); 
  text ('æ—¥æœ¬', width / 4, 180);

}




/* The draw() function continuously executes the lines of code 
  contained inside its block until the program is stopped or noLoop() is called */

function draw() {

/* Two animated SPIRALS made up of circles 
  whose position (x,y) changes over time  */

  /* Local variable: defined in a code block 
    and usable only within the block or its sub-blocks.
    
    The position of the circles depends on the angle (cosine or sine)
    and the scalar value (both variable). 
    There are also two constants: the first added value affects the position
    of the entire spiral in the working space, while the last multiplied one
    affects the spiral step ('passo di spirale'). */

  let x = 120 + cos(angle) * scalar * 2;
  let y = 430 + sin(angle) * scalar * 2;
  
  // lerpColor blends two colors to find a third color somewhere between them
  let color1 = lerpColor(color('white'), color('orangeRed'), frameCount / 400);
  
  // use it as color for the first spiral, no stroke
  fill(color1);
  noStroke();

    circle (x, y, 7);


  // lerpColor again (different gradient for the other spiral)
  let color2 = lerpColor(color('blue'), color('black'), frameCount / 300);
  // use it as color for the second spiral
  fill(color2);
  noStroke();

    circle (x + 90, y - 400, 10, 20);

  // these two variables undergo an increase equal to the speed from time to time
  angle += speed;
  scalar += speed;



//rising LINE generated by the movement of a square with a chromatic gradient
  let color3 = lerpColor(color('blue'), color('red'), frameCount / 100);
  fill(color3);
  noStroke();
    const vel = 1.9 //speed
    square(90, 600 - frameCount * vel, 4);


// grid of SQUARES with random outline color
  let space = 25;
  const colorList = ['white', 'red', 'papayaWhip', 'black'];

  //squares separated horizontally and vertically by a space
    for (x = 345; x < 470; x += space) {
      for (y = 475; y < 600; y += space) {
      noFill();
      strokeWeight(2);
      let colorHex = random(colorList);
      stroke(color(colorHex));
      square(x, y, 20);}
    }

// start a new drawing state
  push();

  // transformations
    translate(width - 90, height - 250);
    rotate(3.6);
    scale(frameCount / 920);

  // chromatic gradient used to fill the text
    let color4 = lerpColor(color('blue'), color('red'), frameCount / 300);
    fill(color4);

    stroke('white');
    strokeWeight(5);
    textSize(300);
    textStyle('light');
    textFont('montserrat');
    text ("å¤ªé™½", 400, 400);

// restore original state
    pop();


if (frameCount == 230) {

  //Game over text
  fill('red');
  strokeWeight(2);
  stroke('black');
  textSize(15);
  textStyle('light');
  textFont('Montserrat');
  text ('Game over   ð–¦¹ Â´ á¯… ` ð–¦¹', width / 4, height - 20);

  //stop loop
  noLoop();

}

}